import 'package:accumulate_api/src/protocol/encoding.dart';
import 'package:accumulate_api/src/protocol/enums.dart';

// DO NOT EDIT. Generated by generate-sdk.sh.

abstract class Signature extends Marshallable {
  int type();

  static Signature fromJson(Map<String, dynamic> json) {
    var type = json['type'] as String;
    switch (SignatureType.byName(type)) {
      {{- range .Types}}
      {{- if .IsSignature}}
      case SignatureType.{{.UnionValue}}:
        return {{.Name}}.fromJson(json);
      {{- end}}
      {{- end}}
      default:
        throw new ArgumentError("Unknown SignatureType '${type}'");
    }
  }
}

abstract class TransactionBody extends Marshallable {
  int type();

  static TransactionBody fromJson(Map<String, dynamic> json) {
    var type = json['type'] as String;
    switch (TransactionType.byName(type)) {
      {{- range .Types}}
      {{- if .IsTransaction}}
      case TransactionType.{{.UnionValue}}:
        return {{.Name}}.fromJson(json);
      {{- end}}
      {{- end}}
      default:
        throw new ArgumentError("Unknown TransactionType '${type}'");
    }
  }
}

{{- range .Types}}

class {{.Name}}
{{- if .IsTransaction}} extends TransactionBody
{{- else if .IsSignature}} extends Signature
{{- else}} extends Marshallable
{{- end}} {
  {{- if or .Embeddings .Fields}}
  {{.Name}}({
  {{- range .Embeddings}}required this.{{lcName .Name}}, {{end}}
  {{- range .Fields}}{{if .IsMarshalled}}{{if not .IsOptional}}required {{end}}this.{{lcName .Name}}, {{end}}{{end}}});
  {{range .Embeddings}}
  {{.Name}} {{lcName .Name}};
  {{- end}}
  {{- range .Fields}}
  {{- if .IsMarshalled}}
  {{template "varType" .}} {{lcName .Name}};
  {{- end}}
  {{- end}}
  {{end}}

  {{- if .IsUnion}}
  int type() {
    return {{.UnionType}}.{{.UnionValue}};
  }
  {{end}}
  List<int> marshalBinary() {
    var writer = ProtocolWriter();

    {{- if .IsUnion}}
    writer.writeUint(1, this.type());
    {{- end}}
    {{- range .Embeddings}}
    writer.writeValue({{.Number}}, this.{{lcName .Name}});
    {{- end}}
    {{- range .Fields}}
    {{- if .IsMarshalled}}
    {{template "binaryMarshalField" .}}
    {{- end}}
    {{- end}}
    return writer.msg;
  }

  Map<String, dynamic> toJson() => {
    {{- range .Embeddings}}
    {{- $name := .Name}}
    {{- range .Fields}}
    {{- if .IsMarshalled}}
    '{{- lcName .Name}}': {{template "jsonMarshalField" map "Field" . "Src" (print "this." (lcName $name))}},
    {{- end}}
    {{- end}}
    {{- end}}
    {{- range .Fields}}
    {{- if .IsMarshalled}}
    '{{- lcName .Name}}': {{template "jsonMarshalField" map "Field" . "Src" "this"}},
    {{- end}}
    {{- end}}
  };

  {{.Name}}.fromJson(Map<String, dynamic> json)
    {{- $first := true}}
    {{- range .Embeddings}}
    {{- if $first}}
    : {{$first = false}}{{else}},
      {{end}}{{- lcName .Name}} = {{.Name}}.fromJson(json)
    {{- end}}
    {{- range .Fields}}
    {{- if .IsMarshalled}}
    {{- if $first}}
    : {{$first = false}}{{else}},
      {{end}}{{- lcName .Name}} = {{template "jsonUnmarshalField" .}}
    {{- end}}
    {{- end}};
}
{{- end}}

{{- define "varType"}}
{{- if .Repeatable}}List<{{template "_varType" .}}>
{{- else          }}{{template "_varType" .}}
{{- end}}
{{- if or .IsOptional .Repeatable}}?{{end}}
{{- end}}

{{- define "_varType"}}
{{-      if eq .Type "url"     }}String
{{- else if eq .Type "bytes"   }}String
{{- else if eq .Type "chain"   }}String
{{- else if eq .Type "string"  }}String
{{- else if eq .Type "bool"    }}bool
{{- else if eq .Type "varint"  }}int
{{- else if eq .Type "uvarint" }}int
{{- else if eq .Type "int"     }}int
{{- else if eq .Type "uint"    }}int
{{- else if eq .Type "bigint"  }}BigInt
{{- else if eq .Type "rawJson" }}dynamic
{{- else if eq .Type "duration"}}double
{{- else if .AsEnum            }}int
{{- else                       }}{{.Type}}
{{- end}}
{{- end}}

{{- define "binaryMarshalField"}}
{{- if .Repeatable}}this.{{lcName .Name}}?.forEach((var value) => writer.{{template "binaryMarshaller" .}}({{.Number}}, value));
{{- else          }}writer.{{template "binaryMarshaller" .}}({{.Number}}, this.{{lcName .Name}});
{{- end}}
{{- end}}

{{- define "binaryMarshaller"}}
{{-      if eq .Type "url"     }}writeUtf8
{{- else if eq .Type "bytes"   }}writeHex
{{- else if eq .Type "chain"   }}writeHash
{{- else if eq .Type "hash"    }}writeHash
{{- else if eq .Type "string"  }}writeUtf8
{{- else if eq .Type "bool"    }}writeBool
{{- else if eq .Type "varint"  }}writeInt
{{- else if eq .Type "uvarint" }}writeUint
{{- else if eq .Type "int"     }}writeInt
{{- else if eq .Type "uint"    }}writeUint
{{- else if eq .Type "bigint"  }}writeBigInt
{{- else if eq .Type "rawJson" }}writeRawJson
{{- else if .AsReference       }}writeValue
{{- else if .AsValue           }}writeValue
{{- else if .AsEnum            }}writeUint
{{- else                       }}UNKNOWNTYPE
{{- end}}
{{- end}}

{{- define "jsonMarshalField"}}
{{- if .Field.Repeatable}}{{.Src}}.{{lcName .Field.Name}}?.map((v) => {{template "jsonMarshalValue" map "Field" .Field "Value" "v"}}).toList()
{{- else                }}{{template "jsonMarshalValue" map "Field" .Field "Value" (print .Src "." (lcName .Field.Name))}}
{{- end}}
{{- end}}

{{- define "jsonMarshalValue"}}
{{-      if eq .Field.Type "bigint"  }}{{.Value}}{{if and .Field.IsOptional (not .Field.Repeatable)}}?{{end}}.toRadixString(10)
{{- else if .Field.AsReference       }}{{.Value}}{{if and .Field.IsOptional (not .Field.Repeatable)}}?{{end}}.toJson()
{{- else if .Field.AsValue           }}{{.Value}}{{if and .Field.IsOptional (not .Field.Repeatable)}}?{{end}}.toJson()
{{- else if .Field.AsEnum            }}{{.Field.Type}}{{if and .Field.IsOptional (not .Field.Repeatable)}}?{{end}}.name({{.Value}})
{{- else                             }}{{.Value}}
{{- end}}
{{- end}}

{{- define "jsonUnmarshalField"}}
{{- if .Repeatable}}(json['{{lcName .Name}}'] as List<dynamic>? ?? []).map((v) => {{template "jsonUnmarshalValue" map "Field" . "Value" "v"}}).toList()
{{- else          }}{{template "jsonUnmarshalValue" map "Field" . "Value" (print "json['" (lcName .Name) "']")}}
{{- end}}
{{- end}}

{{- define "jsonUnmarshalValue"}}
{{-      if eq .Field.Type "bigint"  }}BigInt.parse({{.Value}})
{{- else if eq .Field.Type "varint"  }}{{.Value}} as int{{if not .Field.Repeatable}}?{{if not .IsOptional}} ?? 0{{end}}{{end}}
{{- else if eq .Field.Type "uvarint" }}{{.Value}} as int{{if not .Field.Repeatable}}?{{if not .IsOptional}} ?? 0{{end}}{{end}}
{{- else if eq .Field.Type "int"     }}{{.Value}} as int{{if not .Field.Repeatable}}?{{if not .IsOptional}} ?? 0{{end}}{{end}}
{{- else if eq .Field.Type "uint"    }}{{.Value}} as int{{if not .Field.Repeatable}}?{{if not .IsOptional}} ?? 0{{end}}{{end}}
{{- else if .Field.AsReference       }}{{.Field.Type}}.fromJson({{.Value}})
{{- else if .Field.AsValue           }}{{.Field.Type}}.fromJson({{.Value}})
{{- else if .Field.AsEnum            }}{{.Field.Type}}.byName({{.Value}})
{{- else                             }}{{.Value}} as {{template "_varType" .Field}}{{if and .Field.IsOptional (not .Field.Repeatable)}}?{{end}}
{{- end}}
{{- end}}